--------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  E:\Box\Box Sync\Snuffles Backup\gh8728\Projects\Liquor\Data\Nielsen_Panel\analysis\data_explore.t
> xt
  log type:  text
 opened on:  28 Oct 2017, 16:28:23

. 
. /* Calculating panelists per year */
. append using ny_panelists_2008

. gen year = 2008

. append using ny_panelists_2009

. replace year = 2009 if year == .
(3643 real changes made)

. append using ny_panelists_2010

. replace year = 2010 if year == .
(3561 real changes made)

. append using ny_panelists_2011

. replace year = 2011 if year == .
(3654 real changes made)

. append using ny_panelists_2012

. replace year = 2012 if year == .
(3477 real changes made)

. append using ny_panelists_2013

. replace year = 2013 if year == .
(3426 real changes made)

. append using ny_panelists_2014

. replace year = 2014 if year == .
(3346 real changes made)

. 
. gen NYC = (fips_county_descr == "BRONX" | fips_county_descr == "NEW YORK" | fips_county_descr == "KINGS" | f
> ips_county_descr == "QUEENS" | fips_county_descr == "RICHMOND")

. keep if NYC == 1
(19132 observations deleted)

. 
. tab year

       year |      Freq.     Percent        Cum.
------------+-----------------------------------
       2008 |        783       13.72       13.72
       2009 |        797       13.96       27.68
       2010 |        797       13.96       41.64
       2011 |        839       14.70       56.34
       2012 |        821       14.38       70.73
       2013 |        827       14.49       85.21
       2014 |        844       14.79      100.00
------------+-----------------------------------
      Total |      5,708      100.00

. 
. clear

. 
. /* Working with purchases now */
. 
. use prod_chars_individual

. keep if product > 0 // dropping outside options
(31095 observations deleted)

. 
. gen purchase_month = month(date_d)

. gen purchase_year = year(date_d)

. 
. egen group = group(purchase_month purchase_year upc)

. egen uniq_prices = nvals(price), by(group) // needs egenmore

. egen purch_freq = count(product), by(group)

. 
. hist uniq_prices if product <= 250 & purch_freq > 1, disc percent ///
>         title("") ///
>         xtitle("Unique Prices") graphregion(color(white)) ///
>         fcolor(edkblue) lcolor(black) ylabel(,nogrid)
(start=1, width=1)

. graph export "uniq_prices.pdf", replace
(file uniq_prices.pdf written in PDF format)

. 
. drop group uniq_prices purch_freq

. 
. sum price proof imported d_s_* [weight = projection_factor]
(analytic weights assumed)

    Variable |     Obs      Weight        Mean   Std. Dev.       Min        Max
-------------+-----------------------------------------------------------------
       price |   33516    60827659     20.3797   12.43164          0        225
       proof |   33516    60827659    73.99168   17.87636       11.8        192
    imported |   33516    60827659    .3605533   .4801682          0          1
   d_s_375ML |   33516    60827659    .1143087   .3181906          0          1
   d_s_750ML |   33516    60827659    .2041061   .4030529          0          1
-------------+-----------------------------------------------------------------
      d_s_1L |   33516    60827659    .2415453   .4280265          0          1
    d_s_175L |   33516    60827659    .4400399   .4963992          0          1

. sum price proof imported d_s_* [weight = projection_factor] if product <= 250
(analytic weights assumed)

    Variable |     Obs      Weight        Mean   Std. Dev.       Min        Max
-------------+-----------------------------------------------------------------
       price |   22479    39427141    20.07584   10.64954          0      67.49
       proof |   22479    39427141    76.61143   14.94251         12        151
    imported |   22479    39427141    .3749229   .4841138          0          1
   d_s_375ML |   22479    39427141    .1007453   .3009979          0          1
   d_s_750ML |   22479    39427141    .0908184   .2873571          0          1
-------------+-----------------------------------------------------------------
      d_s_1L |   22479    39427141    .2155661   .4112237          0          1
    d_s_175L |   22479    39427141    .5928702   .4913104          0          1

. 
. preserve

.         bys product: keep if _n == 1
(33258 observations deleted)

.         drop if product > 250
(8 observations deleted)

.         tab1 d_g_*

-> tabulation of d_g_gin  

    d_g_gin |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        233       93.20       93.20
          1 |         17        6.80      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_vod  

    d_g_vod |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        187       74.80       74.80
          1 |         63       25.20      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_rum  

    d_g_rum |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        218       87.20       87.20
          1 |         32       12.80      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_sch  

    d_g_sch |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        231       92.40       92.40
          1 |         19        7.60      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_brb  

    d_g_brb |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        220       88.00       88.00
          1 |         30       12.00      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_whs  

    d_g_whs |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        237       94.80       94.80
          1 |         13        5.20      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_teq  

    d_g_teq |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        243       97.20       97.20
          1 |          7        2.80      100.00
------------+-----------------------------------
      Total |        250      100.00

-> tabulation of d_g_otr  

    d_g_otr |      Freq.     Percent        Cum.
------------+-----------------------------------
          0 |        181       72.40       72.40
          1 |         69       27.60      100.00
------------+-----------------------------------
      Total |        250      100.00

. restore

. 
. /* Purchases by month and Year */
. tab purchase_year purchase_month

purchase_y |                                purchase_month
       ear |         1          2          3          4          5          6          7 |     Total
-----------+-----------------------------------------------------------------------------+----------
      2008 |         0          0          0          0          0          0          0 |       145 
      2009 |       540        466        530        465        570        471        544 |     6,656 
      2010 |       462        429        464        426        540        464        485 |     5,934 
      2011 |       505        378        424        430        476        490        505 |     5,685 
      2012 |       407        365        385        387        431        477        449 |     5,279 
      2013 |       348        376        455        383        413        391        387 |     4,999 
      2014 |       373        354        414        389        402        367        405 |     4,818 
-----------+-----------------------------------------------------------------------------+----------
     Total |     2,635      2,368      2,672      2,480      2,832      2,660      2,775 |    33,516 


purchase_y |                     purchase_month
       ear |         8          9         10         11         12 |     Total
-----------+-------------------------------------------------------+----------
      2008 |         0          0          0          0        145 |       145 
      2009 |       526        536        470        613        925 |     6,656 
      2010 |       462        404        443        533        822 |     5,934 
      2011 |       451        384        438        506        698 |     5,685 
      2012 |       468        365        369        451        725 |     5,279 
      2013 |       408        323        391        468        656 |     4,999 
      2014 |       401        343        364        441        565 |     4,818 
-----------+-------------------------------------------------------+----------
     Total |     2,716      2,355      2,475      3,012      4,536 |    33,516 


. 
. gen date_q = qofd(date_d) // quarterly date. Useful for time graphs

. format date_q %tq

. 
. gen inc = .
(33516 missing values generated)

. replace inc = 2500 if household_income == 3
(206 real changes made)

. replace inc = 6500 if household_income == 4
(77 real changes made)

. replace inc = 9000 if household_income == 6
(346 real changes made)

. replace inc = 11000 if household_income == 8
(654 real changes made)

. replace inc = 13000 if household_income == 10
(472 real changes made)

. replace inc = 17500 if household_income == 11
(626 real changes made)

. replace inc = 22500 if household_income == 13
(1291 real changes made)

. replace inc = 27500 if household_income == 15
(2273 real changes made)

. replace inc = 32500 if household_income == 16
(1777 real changes made)

. replace inc = 37500 if household_income == 17
(1739 real changes made)

. replace inc = 42500 if household_income == 18
(1468 real changes made)

. replace inc = 47500 if household_income == 19
(1815 real changes made)

. replace inc = 55000 if household_income == 21
(3800 real changes made)

. replace inc = 65000 if household_income == 23
(2888 real changes made)

. replace inc = 85000 if household_income == 26
(8317 real changes made)

. replace inc = 150000 if household_income >= 27
(5767 real changes made)

. 
. tab inc [weight = projection_factor]
(frequency weights assumed)

        inc |      Freq.     Percent        Cum.
------------+-----------------------------------
       2500 |    626,794        1.03        1.03
       6500 |    409,179        0.67        1.70
       9000 |    863,578        1.42        3.12
      11000 |  1,508,938        2.48        5.60
      13000 |  1,259,250        2.07        7.67
      17500 |  1,832,223        3.01       10.69
      22500 |  3,304,575        5.43       16.12
      27500 |  4,717,746        7.76       23.87
      32500 |  2,127,784        3.50       27.37
      37500 |  1,705,118        2.80       30.18
      42500 |  1,707,375        2.81       32.98
      47500 |  1,335,250        2.20       35.18
      55000 |  5,490,727        9.03       44.20
      65000 |  4,149,540        6.82       51.03
      85000 | 12,101,071       19.89       70.92
     150000 | 17,688,511       29.08      100.00
------------+-----------------------------------
      Total | 60,827,659      100.00

. tab inc [weight = projection_factor] if NYC
(frequency weights assumed)

        inc |      Freq.     Percent        Cum.
------------+-----------------------------------
       2500 |    295,915        1.06        1.06
       6500 |    317,845        1.13        2.19
       9000 |    558,063        1.99        4.18
      11000 |    455,226        1.63        5.81
      13000 |    256,295        0.92        6.72
      17500 |  1,253,334        4.47       11.20
      22500 |  2,331,284        8.32       19.52
      27500 |  2,930,375       10.46       29.98
      32500 |    923,438        3.30       33.28
      37500 |    827,962        2.96       36.24
      42500 |    676,314        2.41       38.65
      47500 |    396,921        1.42       40.07
      55000 |  2,361,912        8.43       48.50
      65000 |  1,648,463        5.89       54.39
      85000 |  4,665,120       16.66       71.04
     150000 |  8,110,772       28.96      100.00
------------+-----------------------------------
      Total | 28,009,239      100.00

. 
. label define income 3 "0-5" ///
>                                         4 "5-8" ///
>                                         6 "8-10" ///
>                                         8 "10-12" ///
>                                         10 "12-15" ///
>                                         11 "15-20" ///
>                                         13 "20-25" ///
>                                         15 "25-30" ///
>                                         16 "30-35" ///
>                                         17 "35-40" ///
>                                         18 "40-45" ///
>                                         19 "45-50" ///
>                                         21 "50-60" ///
>                                         23 "60-70" ///
>                                         26 "70-100" ///
>                                         27 "100+" //

. 
. gen hh_inc_2 = household_income

. replace hh_inc_2 = 27 if hh_inc_2 > 27
(604 real changes made)

. label values hh_inc_2 income

. 
. graph hbar (percent) household_code [weight=projection_factor], over(hh_inc_2 ) ///
>         l1title("Income Range ($000)") /// undocumented option
>         ytitle("Percent") title("Income Distribution") ///
>         graphregion(color(white)) bar(1,fcolor(edkblue) lcolor(black)) ylabel(,nogrid)
(analytic weights assumed)

. graph export "consumer_income_dist.pdf",replace
(file consumer_income_dist.pdf written in PDF format)

.         
.         
. /* Distribution of household purchases. I.e. distribution of number of times
> a household appears in the data */
. 
. preserve

.         contract household_code

.         disp "Number of Households = " _N
Number of Households = 2209

.         replace _freq = 200 if _freq > 200 // making 200+ bin
(21 real changes made)

.         hist _freq, discrete freq
(start=1, width=1)

.         graph export "hh_freq.pdf", replace
(file hh_freq.pdf written in PDF format)

. restore

. 
. 
. /* Calculating number of retailers */
. 
. preserve

.         contract retailer_code store_code_uc

.         disp "Number of Retailers + Stores = " _N
Number of Retailers + Stores = 296

.         replace _freq = 400 if _freq > 400 // making 400+ bin
(3 real changes made)

.         hist _freq, discrete freq
(start=1, width=1)

.         graph export "retailer_freq.pdf", replace
(file retailer_freq.pdf written in PDF format)

. restore

. 
. /*
> preserve
>         // contracting down to frequencies
>         contract upc_descr fips_county_descr fips_county_code purchase_month purchase_year date_q
>         // generating total purchases overall, annyally, and by month-year combo
>         egen upc_total = total(_freq), by(upc_descr fips_county_descr)
>         egen ann_total = total(_freq), by(purchase_year upc_descr fips_county_descr)
>         egen qtr_total = total(_freq), by(date_q upc_descr fips_county_descr)
>         egen mth_total = total(_freq), by(purchase_month purchase_year upc_descr fips_county_descr)
>         // makes graphs spaced evenly as fips_county_code varies from 5 to 80+
>         egen cty = group(fips_county_descr)
>         
>         // working with overall rank first
>         bys upc_descr fips_county_descr : gen unique = (_n == 1) // flag 1 obs per upc
>         // generating overall ranking
>         egen upc_total_rank = rank(-upc_total) if unique == 1, by(fips_county_descr) unique
>         
>         egen bronx_rank = max((fips_county_descr == "BRONX")*upc_total_rank), by(upc_descr)
>         egen kings_rank = max((fips_county_descr == "KINGS")*upc_total_rank), by(upc_descr)
>         egen ny_rank = max((fips_county_descr == "NEW YORK")*upc_total_rank), by(upc_descr)
>         egen queens_rank = max((fips_county_descr == "QUEENS")*upc_total_rank), by(upc_descr)
>         egen richmond_rank = max((fips_county_descr == "RICHMOND")*upc_total_rank), by(upc_descr)
>         
>         foreach rankvar of varlist bronx_rank kings_rank ny_rank queens_rank richmond_rank {
>                 twoway (connect upc_total_rank cty if `rankvar' == 1 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 2 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 3 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 4 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 5 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 6 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 7 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 8 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 9 & unique == 1) ///
>                 (connect upc_total_rank cty if `rankvar' == 10 & unique == 1), ///
>                 yscale(reverse) legend(off)
>                 graph export "`rankvar'_graph.pdf", replace
> 
>         }
>         
>         /* Originally planned to do this monthly, but data is too thin. Not
>         enough purchases per month */
>         
>         // working with annual rank
>         drop unique
>         bys upc_descr fips_county_descr purchase_year: gen unique = (_n == 1) // flag 1 obs per upc
>         egen year_rank = rank(-ann_total) if unique == 1, by(fips_county_descr purchase_year) unique
>         egen first_rank = max((purchase_year == 2008)*year_rank), by(upc_descr fips_county_descr) // rank in
>  2008
>         foreach cty in "BRONX" "KINGS" "NEW YORK" "QUEENS" "RICHMOND"{
>                 twoway (connected year_rank purchase_year if first_rank == 1 & fips_county_descr == "`cty'" 
> & unique == 1) ///
>                  (connected year_rank purchase_year  if first_rank == 2 & fips_county_descr == "`cty'" & uni
> que == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 3 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 4 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 5 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 6 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 7 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 8 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 9 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                   (connected year_rank purchase_year  if first_rank == 10 & fips_county_descr == "`cty'" & u
> nique == 1), ///
>                   yscale(reverse) legend(off) title("`cty'")
>                   graph export "annual_`cty'_rank.pdf", replace
>         }
>         
>         // Working with quarterly rank
>         drop unique
>         bys upc_descr fips_county_descr date_q: gen unique = (_n == 1) // flag 1 obs per upc
>         egen qtr_rank = rank(-qtr_total) if unique == 1, by(fips_county_descr date_q) unique
>         egen first_qtr_rank = max((date_q == tq(2008q1))*qtr_rank), by(upc_descr fips_county_descr) // rank 
> in 2008q1
>         foreach cty in "BRONX" "KINGS" "NEW YORK" "QUEENS" "RICHMOND"{
>                 twoway (connected qtr_rank date_q if first_qtr_rank == 1 & fips_county_descr == "`cty'" & un
> ique == 1) ///
>                  (connected qtr_rank date_q  if first_qtr_rank == 2 & fips_county_descr == "`cty'" & unique 
> == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 3 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 4 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 5 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 6 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 7 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 8 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 9 & fips_county_descr == "`cty'" & unique
>  == 1) ///
>                   (connected qtr_rank date_q  if first_qtr_rank == 10 & fips_county_descr == "`cty'" & uniqu
> e == 1), ///
>                   yscale(reverse) legend(off) title("`cty'")
>                   graph export "qtr_`cty'_rank.pdf", replace
>         }         
>           
> restore
> */
. 
. 
. log close
      name:  <unnamed>
       log:  E:\Box\Box Sync\Snuffles Backup\gh8728\Projects\Liquor\Data\Nielsen_Panel\analysis\data_explore.t
> xt
  log type:  text
 closed on:  28 Oct 2017, 16:28:32
--------------------------------------------------------------------------------------------------------------
