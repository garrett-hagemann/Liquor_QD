--------------------------------------------------------------------------------------------------------------
      name:  <unnamed>
       log:  E:\Box\Box Sync\Snuffles Backup\gh8728\Projects\Liquor\Data\Nielsen_Panel\analysis\individual_log
> it_sample.txt
  log type:  text
 opened on:  11 Aug 2017, 13:10:02

. 
. local rebuild_data = 0 // set to 1 to rebuild data from scratch. Very slow

. local J = 250 // number of products to get

. 
. set seed 317596364  // seed taken from random.org

. 
. 
. local years = "2009 2010 2011 2012 2013 2014" // "2008 2009 2010 2011 2012 2013 2014"

. if `rebuild_data' { 
.         /* trimming down UPC file so be smaller so merging is easier */
.         use liquor_upcs
. 
.         /* generating varibles that we want */
.         //dropping unwanted types of products
.         drop if product_module_descr == "COOLERS - REMAINING"
.         drop if product_module_descr == "ALOCOHOLIC COCKTAILS"
. 
.         // Liquor type dummies
.         gen d_g_gin = (product_module_descr == "GIN")
.         gen d_g_vod = (product_module_descr == "VODKA")
.         gen d_g_rum = (product_module_descr == "RUM")
.         gen d_g_sch = (product_module_descr == "SCOTCH")
.         gen d_g_brb = regexm(product_module_descr, "BOURBON")
.         gen d_g_whs = regexm(product_module_descr, "WHISKEY")
.         gen d_g_teq = (product_module_descr == "TEQUILA") 
.         gen d_g_otr = (d_g_gin == 0 & d_g_vod == 0 & d_g_rum == 0 & d_g_sch == 0 & d_g_brb == 0 & d_g_whs ==
>  0 & d_g_teq == 0)
. 
.         // Size dummies
.         gen d_s_375ML = (size1_amount == 375)
.         gen d_s_750ML = (size1_amount == 750)
.         gen d_s_1L = (size1_amount == 1)
.         gen d_s_175L = (size1_amount == 1.75) 
. 
.         /* Generating proof */
.         gen proof = regexs(1) if regexm(upc_descr , "([0-9]?[0-9][0-9][.]?[0-9]?[0-9]?)P")
.         destring proof, replace
. 
.         /* imported flag */
.         gen imported = regexm(upc_descr , " IM ")
.         replace imported = 1 if regexm(upc_descr, " PRD ") & d_g_rum == 1 // PRD is Puerto Rico Distilled
.         replace imported = 1 if d_g_sch == 1 // All scotch is imported
.         replace imported = 1 if d_g_teq == 1 // all tequila is imported
. 
.         // imputing proof for products which the regex didn't work
.         reg proof d_g_* imported, nocons
.         predict proof_hat, xb
.         replace proof = proof_hat if proof == .
. 
.         tempfile small_upc_file
.         save `small_upc_file'
. 
.         foreach year in `years'{
  2.                 
.                 use ny_trips_`year', clear
  3.                 gen NYC = (fips_county_descr == "BRONX" | fips_county_descr == "NEW YORK" | fips_county_d
> escr == "KINGS" | fips_county_descr == "QUEENS" | fips_county_descr == "RICHMOND")
  4.                 //keep if NYC == 1
.                 keep trip_code_uc NYC
  5.                 tempfile tmp_trips
  6.                 save `tmp_trips', replace
  7.                                 
.                 import delimited using "../nielsen_extracts/HMS/`year'/Annual_Files/purchases_`year'.tsv", c
> lear colrange(1:5)
  8.                 
.                 /* first merging in just trip codes to eliminate data set size */
.                 
.                 merge m:1 trip_code_uc using `tmp_trips', gen(_merge_trips) keep(3)
  9.                 drop _merge_trips
 10.                 merge m:1 trip_code_uc using ny_trips_`year', gen(_merge_trips) keep(3)
 11.                 
.                 // Identifying liquor purchases
.                 merge m:1 upc upc_ver_uc using `small_upc_file', gen(_merge_upcs) keep(1 3) // keeps all pur
> chases, drops unused liquor UPCs
 12.                 
.                 //Wine is outside option. Identifying wine purchases
.                 merge m:1 upc upc_ver_uc using wine_upcs, gen(_merge_wine) keep(1 3)
 13.                 
.                 // Keeping just one purchase for non-liquor trips
.                 egen max_merge = max(_merge_upcs), by(trip_code_uc) // largest merge code. Should be 3
 14.                 gen liquor_trip = (max_merge == 3) // trips where one of the UPCs is a liquor UPC
 15.                 drop if liquor_trip == 1 & _merge_upcs == 1 // dropping non-liquor records for liquor tri
> ps
 16.                 
.                 egen max_wine = max(_merge_wine), by(trip_code_uc)
 17.                 gen wine_trip = (max_wine == 3)
 18.                 drop if wine_trip == 0 & liquor_trip == 0 // dropping non wine non liquor trips
 19.                 
.                 bys trip_code_uc: gen trip_order = _n // ordering purchases within trips. Doesn't matter if 
> sort is stable. Just need one record for each non-liquor trip
 20.                 drop if liquor_trip == 0 & trip_order > 1 // dropping additional purchases from non-liquo
> r trips
 21.                 
.                 tempfile obs`year'
 22.                 save `obs`year''
 23.         }
. 
.         clear
. 
.         foreach year in `years'{
  2.                 append using `obs`year''
  3.         }
. 
.         
.         gen date_d = date(purchase_date, "YMD") // daily date
.         format date_d %td
. 
.         gen date_m = mofd(date_d) // monthly date
.         format date_m %tm
.         
.         gen year = year(date_d)
.         //keep if year == 2011
. 
.         gen price = total_price_paid / quantity
. 
.         gen white = (race == 1)
.         gen oldest_age = max(male_head_age, female_head_age)
. 
.         gen choice = 1 // all these records are actual choices
.         keep if d_s_375ML | d_s_750ML | d_s_1L | d_s_175L // keeping only popular size bottles
. 
.         // getting top J UPCs
.         preserve
.                 drop if liquor_trip == 0 // keeping only liquor purchases
.                 contract upc, freq(upc_purchases)
.                 gen rev = -upc_purchases
.                 sort rev
.                 keep in 1/`J' // keeping top J products
.                 gen product = _n
.                 save top_upc_individual, replace
.         restore
. 
.         merge m:1 upc using top_upc_individual, gen(_merge_top) assert(1 3)
. 
.         replace product = 0 if _merge_top == 1 & liquor_trip == 0 // outside option
.         replace product = (`J'+1) if _merge_top == 1 & liquor_trip == 1 // all other products
.         replace product = (`J'+2) if product == (`J'+1) & d_g_vod == 1
.         replace product = (`J'+3) if product == (`J'+1) & d_g_sch == 1
.         replace product = (`J'+4) if product == (`J'+1) & d_g_brb == 1
.         replace product = (`J'+5) if product == (`J'+1) & d_g_whs == 1
.         replace product = (`J'+6) if product == (`J'+1) & d_g_teq == 1
.         replace product = (`J'+7) if product == (`J'+1) & d_g_otr == 1
.         replace product = (`J'+8) if product == (`J'+1) & d_g_rum == 1
. 
.         gen case = _n // Each "purchase" is a case. Now need to construct alternatives
.         egen brand_string = concat(brand_descr upc_descr size1_amount size1_units), punct(";") // used to ma
> tch to price schedules
.         egen mkt = group(date_m)
.         save prod_chars_individual, replace
. }

. 
. clear

. use prod_chars_individual

. /* outputing csv of product characteristics */
. preserve

.         drop if product == 0
(31095 observations deleted)

.         export delim using "product_chars.csv", replace
file product_chars.csv saved

. restore

. 
. /* Generating population & sample weights then sampling fewer of the outside
> option purchases. This should substantially reduce the number of observations
> in the data set. Note that weights apply to products not people. */
. 
. count
64611

. disp "Original case count: " r(N)
Original case count: 64611

. egen pop_weight = count(case), by(product)

. replace pop_weight = pop_weight / _N // converting to percents
(64611 real changes made)

. 
. // sampling non-liquor purchases
. /*
> count if product > `J'
> local liq_N = r(N)
> sample `liq_N' if product == 0, count // sampling as many outside option purchases as non-top 100 product pu
> rchases
> */
. egen sample_weight = count(case), by(product)

. replace sample_weight = sample_weight / _N // converting to percents
(64611 real changes made)

. 
. // end of sampling code
. 
. keep case product choice price d_*_* proof imported date_m household_income white oldest_age NYC pop_weight 
> sample_weight brand_string

. egen avg_price = mean(price), by(product date_m)

. 
. /* replacing imported, proof, and size dummies with avg value for aggregate products */
. foreach var of varlist d_s_* proof imported {
  2.         egen mean_`var' = mean(`var'), by(product)
  3.         replace `var' = mean_`var' if product > `J'
  4.         drop mean_`var'
  5. }
(31095 missing values generated)
(11037 real changes made)
(31095 missing values generated)
(11037 real changes made)
(31095 missing values generated)
(11037 real changes made)
(31095 missing values generated)
(11037 real changes made)
(31095 missing values generated)
(11037 real changes made)
(31095 missing values generated)
(8934 real changes made)

. 
. tempfile all_choices

. save `all_choices'
file C:\Users\garre\AppData\Local\Temp\ST_0e000002.tmp saved

. 
. fillin product case // generate 1 product record per choice situation

. replace choice = 0 if choice == . // all new records are non-choices
(16669638 real changes made)

. 
. // setting product 0 attributes to 0
. foreach var of varlist d_*_* proof import price avg_price {
  2.         replace `var' = 0 if product == 0 
  3. }
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64611 real changes made)
(64600 real changes made)
(64611 real changes made)

. 
. // filling in case variables
. foreach var of varlist household_income white NYC date_m {
  2.         bys case (`var'): replace `var' = `var'[1] if missing(`var')
  3. }
(16669638 real changes made)
(16669638 real changes made)
(16669638 real changes made)
(16669638 real changes made)

. 
. 
. // filling in product variables except avg_price
. /* Uses means for conglomerate products and actual value for single products */
. foreach var of varlist d_g_* d_s_* proof imported {
  2.         bys product (`var'): replace `var' = `var'[1]
  3. }
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)
(16636122 real changes made)

. 
. // filling in brand string to use in price sched matching
. bys product (brand_string): replace brand_string = brand_string[_N] // empty strings sorted first
(16680998 real changes made)

. 
. // fixing average price when not missing
. bys product date_m (avg_price): replace avg_price = avg_price[1]
(8793672 real changes made)

. 
. // interpolating missing avg_price
. preserve

.         bys product date_m: keep if _n == 1
(16715342 observations deleted)

.         sort product date_m

.         xtset product date_m
       panel variable:  product (strongly balanced)
        time variable:  date_m, 2008m12 to 2014m12
                delta:  1 month

.         gen avg_price_inter = avg_price
(9110 missing values generated)

.         // filling forward
.         bys product (date_m): replace avg_price_inter = avg_price_inter[_n-1] if avg_price_inter == .
(7928 real changes made)

.         // filling backward to handle missings at begining of data
.         gen rev = -date_m

.         bys product (rev): replace avg_price_inter = avg_price_inter[_n-1] if avg_price_inter == .
(1182 real changes made)

.         sort product date_m

.         keep product date_m avg_price_inter

.         tempfile ipol

.         save `ipol'
file C:\Users\garre\AppData\Local\Temp\ST_0e000004.tmp saved

. restore

. 
. merge m:1 product date_m using `ipol'

    Result                           # of obs.
    -----------------------------------------
    not matched                             0
    matched                        16,734,249  (_merge==3)
    -----------------------------------------

. 
. /*
> levelsof date_m, local(months)
> foreach m of local months {
>         keep if date_m == `m'
>         tempfile m_choices
>         tempfile m_alts
>         
>         save `m_choices' // original choices
>         
>         fillin case product
>         
>         replace choice = 0 if _fillin == 1
>         
>         keep if choice == 0 // alternatives
>         save `m_alts'
>         
>         use `m_choices', clear
>         
>         sample 1, count by(product) // randomly select one product record each month
>         
>         drop case household_income white NYC // droping case specific vars
>         
>         merge 1:m product using `m_alts', update replace gen(_merge_alts)
>         
>         append using `m_choices'
>         
>         sort case product
>         
>         tempfile `m'data
>         save ``m'data'
>         clear
>         use `all_choices'
> }
> 
> clear
> foreach m of local months{
>         append using ``m'data'
> }
> */
. 
. 
. 
. /* sampling alternatives within cases to further reduce data set size. Should be OK for Logit.
> Always keeping outside option and choice */
. //sample 20 if (choice == 0) & (product > 0), count by(case)
. 
. 
. // Replacing household income where missing within a case.
. 
. 
. compress // making dataset smaller
  NYC was float now byte
  d_g_gin was float now byte
  d_g_vod was float now byte
  d_g_rum was float now byte
  d_g_sch was float now byte
  d_g_brb was float now byte
  d_g_whs was float now byte
  d_g_teq was float now byte
  d_g_otr was float now byte
  date_m was float now int
  white was float now byte
  oldest_age was float now byte
  choice was float now byte
  product was float now int
  brand_string was str69 now str59
  (836,712,450 bytes saved)

. 
. //drop if date_m < tm(2008m1)
. 
. save individual_logit_sample, replace
file individual_logit_sample.dta saved

. 
. 
. log close       
      name:  <unnamed>
       log:  E:\Box\Box Sync\Snuffles Backup\gh8728\Projects\Liquor\Data\Nielsen_Panel\analysis\individual_log
> it_sample.txt
  log type:  text
 closed on:  11 Aug 2017, 13:17:58
--------------------------------------------------------------------------------------------------------------
